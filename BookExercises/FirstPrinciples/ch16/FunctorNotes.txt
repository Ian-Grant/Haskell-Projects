Functor

Chapter Summary
  - Return of the Higher-Kinded Types
  - Fmaps galore, and on diffrent data types than just lists.
  - Typeclasses and Constructor Classes

Last Chapter on monoid which was about algebra and turning it into a typeclass.
This Chapter and the following Applicative and Monad are similar but each
    algebra is more powerful than the last. (This isn't even my final form.)

General Concept is same, abstract a common pattern make it follow certain laws.
    Give cool name and live in wonder with it.

This chapter is about Functor which is all about a pattern of mapping over a structure
    aka fmap back in List Chapter

Functors are combinators, they take a sentence or phrase as input and
                    outputs a sentence or phrase with a logic operation applied onto it

    Ex: Negation is a functor in this sense because when negation is applied to
        a sentance, A, it produces the negated version, ~A, as output.
        It lifts the concept of negation over the entire sentence or phrase
        structure without changing the internal structure.

===What is a Functor?===

A functor is a way to apply a function over a structure that we don't want to alter.
    A function is applied to value inside structure and leave structure alone.
    No elements are removed or added. Only transformed.

===FMAP===

--Map&Fmap--
map (\x -> x > 3) [1..6]
[False,False,False,True,True,True]

fmap (\x -> x > 3) [1..6]
[False,False,False,True,True,True]

map and fmap work the same as eachother when applied on a List.

Tho fmap can be applied to alot more data types while map only works on lists.

map exists solely for new people to haskell so they only see errors about lists
    when using map versus seeing errors about Functors when using fmap.

the function f in the Functor definition must be kind * -> *
    For a Few Reasons
        1. Each argument and result in the type signature for a function
            must be a fully applied type. Each arg must be kind *.
        2. The type f was applied to a single argument in two diffrent places
            f a and f b. Since f a and f b must have kind *. f by itself is * -> *
Every arg to (->) must be of kind *
    because the kind of (->) is * -> *
Each arg and result of every function must be a type constant not a type constructor
    aka kind *

===Functor is function application===
Inflix operator for fmap is <$>.

Functor is a typeclass for function application over or through some data structure f.
    and we want to leave structure f alone and untouched but modify the data
    inside but have the structure be unchanged.

===FUNCTOR LAWS===

Idenitiy
fmap id == id
fmap id "Hi Julie"
"Hi Julie"

===Composition===

fmap (f . g) == fmap f . fmap g

composing the function inside fmap will be the same
as running both functions in fmap seperately then composing them.

===Structure Preservation===

Both of the above laws touch upon rule of structural preservation.


===The Good the Bad the Ugly===

Law abiding functor instances keep their idenity law proper
whereas the law breaking functor instances break the idenity law.
  Ex:
    data WhoCares a = ItDoesnt | Matter a | WhatThisIsCalled deriving (Eq,Show)

    instance Functor WhoCares where
      fmap _ ItDoesnt = ItDoesnt
      fmap _ WhatThisIsCalled = WhatThisIsCalled
      fmap f (Matter a) = Matter (f a)
    -- The above functor instance is law abiding because if the
    -- id (idenity) function is applied to it
    -- it'll return the same value as passed into the functor.

    -- However the below instance is law breaking because it
    -- doesn't regaurd the idenity function
    instance Functor WhoCares where
      fmap _ ItDoesnt = ItDoesnt
      fmap f WhatThisIsCalled = ItDoesnt
      fmap f (Matter a) = Matter (f a)
    -- It is law breaking because f applied on WhatThisCalled results in
    -- ItDoesnt which breakes the idenity law
    -- cuz if id was applied by the functor to WhatThisIsCalled it
    -- would return ItDoesnt which does not equal
    -- id WhatThisIsCalled which just returns WhatThisIsCalled
    By breaking the idenity law it is no longer a functor if that is
     the intended use though don't make it a functor

    just write it as a normal function. Because the point and reason Functors are special
      is because they follow the idenity law when mapping over a datastructure
      they modify the data and not the structure.

    Later in this chapter the opposite will be taught transforming the
    structure but the data is not modified.

===Composition should just work ===

fmap (f . g) == fmap f . fmap g

composing functions should work the same as doing them seperately then composed.

If the structure has multiple datatypes in it keep
    lifting till u have only what will be modified.

===Commonly used Functors===

    see commonFunctors.hs
===Functors are stacked and that's a fact===

We can combine datatypes by nesting them. Then modify data by lifting them.

===Transforming the Unapplied Type Argument===

Fmaping only applies to 2nd half of a tuple, either, and
    other data types because it cannot modifiy the structure.
    It has to only modify the data

===Instances of Functores Ex===
    see InstancesOfFunc.hs

===Ignoring Possiblities===

---Maybe---

incIfJust :: Num a => Maybe a -> Maybe a
incIfJust (Just n) = Just $ n+1
incIfJust _ = Nothing

showIfJust :: Show a => Maybe a -> Maybe String
showIfJust (Just s) = Just $ show s
showIfJust _ = Nothing

