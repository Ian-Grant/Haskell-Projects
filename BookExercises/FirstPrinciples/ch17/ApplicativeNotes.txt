===Applicative Notes===

===Applicative===
Monoid gives a way of mashing two values of the same type together.
Functor gives a way for a function application over some structure we don't want
    to mess with or think about.

Applicatives are monoidal functors. *explosions in mind*
The Applicative typeclass allows for function application lifted (applied/mapped)
over a structure (like a Functor does).

But with Applicative, the function we're applying is also nested inside a structure.
Because the function and the value it's being applied to both have structure we
need to mash the structures together. Aka, Applicatives involve monoids and functors.

---Chap Over---
■ Define and explore the Applicative typeclass and its core operations.
■ Demonstrate why applicatives are monoidal functors
■ Laws and Instances
■ More Lifting Bro
■ Validations

===Defining===
Typeclass Declaration: Every type that is Applicative must also have a Functor instance.
----------------------
class Functor f => Applicative f where
    pure :: a -> f a
    (<*>) :: f (a -> b) -> f a -> f b

The pure function is simple and boring: it lifts something into a
functorial/applicative structure. The bare minimum bit of structure or strucural identity.

<*> is the more intresing operation its a infix function called `apply`/`ap`/`tie fighter`

Comparing types of <*> (tie fighter) and fmap:
--------------------------------
--fmap
(<$>) :: Functor f => (a -> b) -> f a -> f b
--ap (tie fighter)
(<*>) :: Applicative f => f (a -> b) -> f a -> f b

The diffrence is the f representing functorial structure that is on the function
in the definition of ap (tie fighter).

Along with these core functions Control.Applicative library provides some
convenient functions: liftA, liftA2, and liftA3:

liftA :: Applicative f => (a -> b) -> f a -> f b
liftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c
liftA3 :: Applicative f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d

===Functors vs Applicative===

fmap :: (a -> b) -> f a -> f b
(<*>) :: f (a -> b) -> f a -> f b

fmap f x = pure f <*> x

===Applicative functors are monoidal functors===
($) :: (a -> b) -> a -> b
(<$>) :: (a -> b) -> f a -> f b
(<*>) :: f (a -> b) -> f a -> f b

<$> The alias for fmap the function (a -> b) is being lifted over the f around a.
<*> The alias for ap the function being lifted over the structure of a is also
    embedded in it's own structure that needs to be lifted to be applied.

This is where the monoidal part of aplicatives come into play.
It lifts the structure and applies the function inside on to the values
inside of the same structure on the otherside. The it combinds the two
structures together

With Applicative we have ae Monoid for our structure and Functor for the values.
In a sense Applicative is a monoid bolted onto a Functor to deal with functions
    embedded in additional structure.
=== Applicative in Use ===

--- List Applicative --

f = []
(<*>) :: f (a -> b) -> f a -> f b
(<*>) :: [] (a -> b) -> [] a -> [] b

more syntactically typed
(<*>) :: [(a -> b)] -> [a] -> [b]

--- What does the List applicative do? ---
applies each function in the function list onto the value in the same
    postion in the value list
applying the first list onto the second list
--- Exercise: Lookup---
    ---see Lookups.hs

=== Identity ===
Identity type is a way to add structure without changing semantics of what you're doing.

--- Specializing the Types ---

-- f - Identity
type Id = Identity
(<*>) :: f (a -> b) -> f a -> f b
(<*>) :: Id (a -> b) -> Id a -> Id b

pure :: a -> f a
pure :: a -> Id a

--- Exercise: Identity Instance ---
    Write Applicative instance for Identity
    --see Identity.hs

=== Constant ===
type C = Constant
(<*>) :: f (a -> b) -> f a -> f b
(<*>) :: C e (a -> b) -> C e a -> C e b

pure :: a -> f a
pure :: a -> C e a

--- Exercise: Constant Instance ---
    --- see Constant.hs
=== Maybe Applicative ===

Function can exist but can also just be a Nothing

type M = Maybe
(<*>) :: f (a -> b) -> f a -> f b
(<*>) :: M (a -> b) -> M a -> M b

pure :: a -> f a
pure :: a -> M a

instance Applicative Maybe where
    pure = Just
    Nothing <*> _ = Nothing
    _ <*> Nothing = Nothing
    Just f <*> Just a = Just (f a)

--- Using the Maybe Applicative ---
    ---- see Validate.hs
--- Exercise Fixer Upper
    ---- see FixerUpper.hs

=== Applicative Laws ===

--- Identity ---
Applies the id (Identity) function onto a structure and returns that structure.
Id law states that all of below are equal.
id [1..5]
fmap id [1..5]
pure id <*> [1..5]

--- Composition ---
The law is stating the result of composing the functions first and then applying it
is the same as applying the functions then composing them.
pure (.) <*> u <*> v <*> w = u <*> (v <*> w)

--- Homomorphism ---
A homomorphism is a structure preserving map between two algebric structures.
Meaning the effect of applying a function that is embedded in some structure to
a value tha is embedded in some structure should be the same as applying a
function to a value without affecting any outside structure.

pure f <*> pure x = pure (f x)

pure (+1) <*> pure 1
pure ((+1) 1)

The gerneral idea of homomorphism law is that applying the function doesn't
change the structure around the values. aka Functorial-ness.

--- Interchange ---

u <*> pure y = pure ($ y) <*> u

Just (+ 2) <*> pure 2 == Just 4
pure ($ 2) <*> Just (+ 2) == Just 4

(Just (+2) <*> pure 2) == (pure ($ 2) <*> Just (+2))

Examples to try:
[(+1),(*2)] <*> pure 1 == pure ($ 1) <*> [(+1),(*2)]

[(+1),(*2)] <*> pure 1  == [2,2]
pure ($ 1) <*> [(+1),(*2)] == [2,2]

Just (+3) <*> pure 1 == pure ($ 1) <*> Just (+3)

Just (+3) <*> pure 1 = Just 4
pure ($ 1) <*> Just (+3) = Just 4

=== You knew this was coming ===
Writing Applicative laws.
    ---see BadMonoid.hs

=== ZipList Monoid ===
The default monoid for list is concatination.
But there is another way to monoidally combine lists.
