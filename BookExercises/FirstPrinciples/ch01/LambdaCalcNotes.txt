Lambda Calculus
\x = labda

Referential Transparency - Same function same result no change

Three Components or Lambda Terms
Expressions - Refers to all of them. It can be variable, an abstraction or combination
Variables - No meaning or value just names for potential inputs
Abstractions - Functions made of two parts a head and a body
    variable head is parameter and binds all instances of variable in function
    \x y.zy
    head=y
    body=zy
Free variable - term not bound by the head ex: z above
Combinators - a labda term with no free variables server only to combine args given
Divergence - when terms can't be reduced to beta normal form cuz it just loops or infinite
    ex: (\x x.xx)(\x x.xx)

Definitions
---------------------------------------
Lambda Calculus - formal system for expressing programs in terms of abstractions and applications
Lambda - \x in haskell - used to introduce agruments for binding in expressions
Lambda Abstraction or just Abstraction - same as a function or a lambda term
    (\x x.x+1)
    the head of the expression \x x abstracts the term x+1
    so we can apply term to any x and recompute different results
Application - evaluation or reducuction of lambdas
    binding arguments to the lambda they were applied to
Normal Order - evaluating aka applying/ beta reducing leftmost outermost labdas first
    evaluating terms nested within once you run out of arguments to apply
